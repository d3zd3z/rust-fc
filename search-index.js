var searchIndex = {};
searchIndex["rust_fc"] = {"doc":"# rust-fc","items":[[0,"devices","rust_fc","# Device specifications",null,null],[3,"ADIS","rust_fc::devices","Unwrapped and converted ADIS IMU data.",null,null],[12,"vcc","","VCC [Volts]. The voltage coming into the IMU",0,null],[12,"gyro_x","","X-axis rate-gyro [deg/s]",0,null],[12,"gyro_y","","Y-axis rate-gyro [deg/s]",0,null],[12,"gyro_z","","Z-axis rate-gyro [deg/s]",0,null],[12,"acc_x","","X-axis accelerometer [m/s²]",0,null],[12,"acc_y","","Y-axis accelerometer [m/s²]",0,null],[12,"acc_z","","Z-axis accelerometer [m/s²]",0,null],[12,"magn_x","","X-axis magnetometer [Tesla]",0,null],[12,"magn_y","","Y-axis magnetometer [Tesla]",0,null],[12,"magn_z","","Z-axis magnetometer [Tesla]",0,null],[12,"temp","","Temperature [Kelvin] of the IMU",0,null],[5,"recv_adis","","Read an ADIS message from raw bytes.",null,null],[17,"SIZE_OF_ADIS","","ADIS message size (bytes)",null,null],[17,"ADIS_NAME","","ADIS message name (ASCII: ADIS)",null,null],[0,"io","rust_fc","# Input and Output",null,null],[3,"FC","rust_fc::io","Flight Computer IO.",null,null],[3,"SequenceError","","A sequence error message.",null,null],[12,"port","","Which port the packet error is from",1,null],[12,"expected","","Expected packet sequence number",1,null],[12,"received","","Actual received packet sequence number",1,null],[17,"PSAS_ADIS_PORT","","Expected port for ADIS messages",null,null],[17,"SIZE_OF_SEQE","","Sequence Error message size (bytes)",null,null],[17,"SEQE_NAME","","Sequence Error message name (ASCII: SEQE)",null,null],[11,"default","","",2,{"inputs":[],"output":{"name":"fc"}}],[11,"listen","","Listen for messages from the network.",2,{"inputs":[{"name":"fc"}],"output":{"name":"option"}}],[11,"log_message","","Log a message to disk.",2,null],[11,"telemetry","","Send a message to the ground.",2,null],[11,"as_message","","Return a copy of this struct as a byte array.",1,null],[0,"state","rust_fc","# State Vector",null,null],[3,"State","rust_fc::state","A representation for the current state vector in MKS units.",null,null],[12,"time","","Exact time (nanoseconds from boot) that state-vector is valid for.",3,null],[12,"acc_up","","Vertical Acceleration [m/s²]",3,null],[12,"vel_up","","Vertical velocity [m/s]",3,null],[12,"altitude","","Altitude above sea level [m]",3,null],[12,"roll_rate","","Roll rate [deg/s]",3,null],[12,"roll_angle","","Roll angle [deg] (zero is initial angle)",3,null],[17,"SIZE_OF_STATE","","State message size (bytes)",null,null],[17,"STATE_NAME","","State message name (ASCII: STAT)",null,null],[11,"default","","",3,{"inputs":[],"output":{"name":"state"}}],[11,"update_imu","","Update the state based on new IMU data.",3,{"inputs":[{"name":"state"},{"name":"duration"},{"name":"adis"}],"output":null}],[11,"as_message","","Return a copy of this struct as a byte array.",3,null],[0,"control","rust_fc","# Vehicle Controls",null,null],[3,"Control","rust_fc::control","Controller",null,null],[12,"integral","","Current PID Integral",4,null],[12,"last_error","","Last error for PID Derivative",4,null],[11,"default","","",4,{"inputs":[],"output":{"name":"control"}}],[11,"pid","","A PID loop controller.",4,{"inputs":[{"name":"control"},{"name":"state"}],"output":null}]],"paths":[[3,"ADIS"],[3,"SequenceError"],[3,"FC"],[3,"State"],[3,"Control"]]};
initSearch(searchIndex);
